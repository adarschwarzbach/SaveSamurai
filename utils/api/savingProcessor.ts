import { Category, SpendEntryWithCategory } from "../../types";
import { formatTransactionForGPT } from "../formatting";
import { openai } from "../openai";
import generateCategoryGroupedData from "./generateCategoryGroupedData";

export default async function savingsProcessor({
  chronologicalData,
}: {
  chronologicalData: SpendEntryWithCategory[] | [];
}): Promise<{ [key in Category]: SpendEntryWithCategory[] | [] }> {
  const errorOutput = {
    Groceries: [],
    Restaurant: [],
    Utilities: [],
    Entertainment: [],
    Health: [],
    Travel: [],
    Shopping: [],
    Education: [],
    Transportation: [],
    Other: [],
  };

  if (!chronologicalData || !chronologicalData.length) {
    return errorOutput;
  }

  const prompt = formatSavingsProcessorPrompt({ chronologicalData });

  // feed into openai
  const completion = await openai.chat.completions.create({
    messages: [{ role: "user", content: prompt }],
    model: "gpt-4",
  });

  try {
    if (!completion?.choices?.[0]?.["message"]?.["content"])
      throw "No response from GPT4 for Saving Processor";
    const outputArray = JSON.parse(
      completion.choices[0]["message"]["content"]
    ) as number[];

    // select out the items with the indices generated by GPT
    const selectedSpendsToRemove: SpendEntryWithCategory[] = [];
    for (const idx of outputArray) {
      selectedSpendsToRemove.push(chronologicalData[idx]);
    }

    const categoryGroupedData = generateCategoryGroupedData({
      spendsWithCategories: selectedSpendsToRemove,
    });

    return categoryGroupedData;
  } catch (error) {
    console.error(error);
    return errorOutput;
  }
}

const formatSavingsProcessorPrompt = ({
  chronologicalData,
}: {
  chronologicalData: SpendEntryWithCategory[] | [];
}): string => {
  const prompt = `You are a helpful assistant and are trying to help me cut down non-essential transactions so I can save money. Below is a list of credit card transactions:

${chronologicalData.map((transaction, i) =>
  formatTransactionForGPT({ i, transaction })
)}

You will determine which of these transactions, if any, are unnecessary or ridiculous spends and can be removed. Only consider a transaction unnecessary if you are sure.

You will respond in only a JSON array with the INDICES of the transactions that are unnecessary spends and can be removed. The indices are provided on the same line as the transaction. The output type therefore is a number[].

Output JSON array only:
`;

  return prompt;
};
